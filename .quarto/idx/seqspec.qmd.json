{"title":"What is `seqspec`?","markdown":{"yaml":{"title":"What is `seqspec`?"},"headingText":"Understanding the `seqspec` File Format","containsRefs":false,"markdown":"\n\n**seqspec** is a simple, standardized file format to describe how a genomics library was prepared and sequenced. Different genomics assays require unique processing steps. Including a seqspec file with your data makes it easy for others (and future you!) to reanalyze your dataset. Here we will give a brief description of the seqspec format. For a more in-depth description of seqspec and the seqspec file format, refer to the [GitHub page](https://github.com/pachterlab/seqspec).\n\n\nA seqspec file is a **YAML-formatted document** with three main sections:\n\n1. **Assay Info** – metadata describing the assay and protocols used  \n2. **Library Structure** – layout and sequence of regions in the library  \n3. **Read Structure** – how the sequencing reads correspond to library regions\n\nEach section depends on the specific **library preparation** and **sequencing technology** used in your assay.\n\n::: {.callout-note title=\"Why YAML?\"}\nYAML (short for “YAML Ain’t Markup Language”) is a lightweight, human-readable format that is easy to edit and interpret, yet structured enough for automated parsing by software. This balance makes it ideal for encoding experimental metadata that must be both transparent to researchers and machine-accessible for reproducible analysis.\n:::\n\n## Section 1: Assay Info\n\nThe first section describes the overall experiment — what assay was used, which kit, and how it was sequenced.\n\n### Basic Format\n\n```yaml\n!Assay\nseqspec_version: 0.3.0\nassay_id: \nname: \ndoi: \ndate: \ndescription:\nmodalities: rna\nlib_struct: \nsequence_protocol: \nsequence_kit: \nlibrary_protocol: \nlibrary_kit:\n```\n\n**seqspec_version** — version of the seqspec format used (this tutorial will use version 0.3.0)\n\n**assay_id, name, doi, date, description** — metadata describing the assay\n\n**library_protocol, library_kit** — kit and reagents used for library prep\n\n**sequence_protocol, sequence_kit** — sequencing instrument and reagents used\n\n### Example\n\nSuppose you used the **Parse Biosciences Evercode WT Mega v2.0.1 dual index kit** to generate an scRNA-seq library, sequenced on **Illumina NovaSeq X**. The corresponding seqspec file might look like so:\n\n```yaml\n!Assay\nseqspec_version: 0.3.0\nassay_id: Evercode-WT-mega-v2-dual-index\nname: Parse Evercode Mega WT v2 using dual Illumina multiplex index\ndoi: https://www.protocols.io/view/evercode-wt-mega-v2-2-1-8epv5xxrng1b/v1?step=21\ndate: 08 November 2023\ndescription: split-pool ligation-based transcriptome sequencing\nmodalities: rna\nlib_struct: https://igvf.github.io/seqspec/\nlibrary_protocol: single-nucleus RNA sequencing assay (OBI:0003109)\nlibrary_kit: Evercode WT Mega v2.0.1 dual index\nsequence_protocol: Illumina NovaSeq X (EFO:0022840)\nsequence_kit: NovaSeq X Series 25B Reagent Kit\n```\n\n## Section 2: Library Structure\n\nThe library structure section lists all regions in the sequencing library (from 5’ to 3’), such as primers, linkers, UMIs, and barcodes.\n\nEach region is defined with the following template:\n\n``` yaml\n- !Region\n  parent_id: \n  region_id: \n  region_type:\n  name: \n  sequence_type: \n  sequence: \n  min_len: \n  max_len: \n  onlist: \n  regions: \n```\n\n**region_id, region_type, name** — identifies and describes the region\n\n**parent_id** — refers to the parent region (if it exists)\n\n**sequence, sequence_type** — specifies the nucleotide sequence and its type (e.g., fixed, onlist, variable)\n\n**min_len, max_len** — defines expected sequence lengths\n\n**onlist** — references a file or list of valid sequences (e.g., known cell barcodes)\n\n### Nested Regions\n\nParent regions can contain multiple child regions, forming a hierarchical structure.\nHere’s a minimal example with one parent and two child regions:\n\n``` yaml\nlibrary_spec:\n- !Region\n  parent_id: null\n  region_id: parent\n  ...\n  regions:\n  - !Region\n    parent_id: parent\n    region_id: region_1\n    ...\n    regions: null\n  - !Region\n    parent_id: parent\n    region_id: region_2\n    ...\n    regions: null\n```\n\n### Examples\n\nBelow are two example regions you might find in a seqspec file.\n\n#### Example 1: Illumina P5 primer\n``` yaml\n- !Region\n  parent_id: null\n  region_id: P5\n  region_type: primer\n  name: P5\n  sequence_type: fixed\n  sequence: AATGATACGGCGACCACCGAGATCTACAC\n  min_len: 29\n  max_len: 29\n  onlist: null\n  regions: null\n```\n\n#### Example 2: Parse Biosciences Evercode WT cell barcode\n``` yaml\n- !Region\n  parent_id: null\n  region_id: BC\n  region_type: barcode\n  name: cell barcode\n  sequence_type: onlist\n  sequence: NNNNNNNNNNNNNNNN\n  min_len: 16\n  max_len: 16\n  onlist: !Onlist\n    location: local\n    filename: onlist.txt\n  regions: null\n```\n\n::: {.callout-note title=\"What is an Onlist?\"}\nIn Parse Evercode libraries, barcode regions are validated against a fixed list of known barcodes called the “onlist”.\n:::\n\n## Section 3: Read Structure\n\nThe read structure section links your FASTQ files to specific sequencing reads.\n\nEach read entry looks like this:\n\n``` yaml\n- !Read\n  read_id: \n  name: \n  modality: \n  primer_id: \n  min_len: \n  max_len: \n  strand: \n  files:\n```\n\n**read_id, name** — identifies the read object\n\n**primer_id** — links to the corresponding primer region\n\n**strand** — direction of sequencing relative to the library layout\n\n**min_len, max_len** — expected read length\n\n**files** — references the FASTQ files containing this read\n\n### Example\n\n``` yaml\nsequence_spec:\n- !Read\n  read_id: read_1\n  name: Read 1\n  modality: rna\n  primer_id: truseq_read1\n  min_len: 28\n  max_len: 28\n  strand: pos\n  files:\n  - !File\n    file_id: read_1\n    filename: read_1.fastq.gz\n    filetype: fastq.gz\n    filesize: 10 GB\n    url: https://example.org/read_1.fastq.gz\n    urltype: https\n    md5: d1410f93b53357d4f95edb0ba0d73c07\n```\n\n### Step 3: Validate Your seqspec file with `seqspec check`\nYou can use `seqspec check` command from the seqspec package to verify your seqspec file is correctly formatted.\n\nInstall seqspec using **pip**.\n\n```bash\npip install seqspec\n```\n\nOr, if you're using a conda environment, install it with:\n\n```bash\nconda install -c conda-forge -c bioconda seqspec\n``` \n\nOnce installed, you can validate your file - let’s call it seqspec.yaml - by running:\n\n```bash\nseqspec check seqspec.yaml\n```\n\nIf your file is valid, the command will complete without errors; otherwise, it will print a description of any issues found in the specification.\n\n# Summary\n\n| Section           | Purpose                                          |\n|-------------------|:------------------------------------------------:|\n| Assay Info        | Defines the experimental and sequencing metadata | \n| Library Structure | Describes regions within your sequencing library |\n| Read Structure    | Links reads and files to specific regions        | \n<br>\n\n:::{.highlight-section}\nTo get a get an assay-specific sample seq-spec file and tutorial, select your assay [here](seqspec_tutorials.qmd).\n:::","srcMarkdownNoYaml":"\n\n**seqspec** is a simple, standardized file format to describe how a genomics library was prepared and sequenced. Different genomics assays require unique processing steps. Including a seqspec file with your data makes it easy for others (and future you!) to reanalyze your dataset. Here we will give a brief description of the seqspec format. For a more in-depth description of seqspec and the seqspec file format, refer to the [GitHub page](https://github.com/pachterlab/seqspec).\n\n## Understanding the `seqspec` File Format\n\nA seqspec file is a **YAML-formatted document** with three main sections:\n\n1. **Assay Info** – metadata describing the assay and protocols used  \n2. **Library Structure** – layout and sequence of regions in the library  \n3. **Read Structure** – how the sequencing reads correspond to library regions\n\nEach section depends on the specific **library preparation** and **sequencing technology** used in your assay.\n\n::: {.callout-note title=\"Why YAML?\"}\nYAML (short for “YAML Ain’t Markup Language”) is a lightweight, human-readable format that is easy to edit and interpret, yet structured enough for automated parsing by software. This balance makes it ideal for encoding experimental metadata that must be both transparent to researchers and machine-accessible for reproducible analysis.\n:::\n\n## Section 1: Assay Info\n\nThe first section describes the overall experiment — what assay was used, which kit, and how it was sequenced.\n\n### Basic Format\n\n```yaml\n!Assay\nseqspec_version: 0.3.0\nassay_id: \nname: \ndoi: \ndate: \ndescription:\nmodalities: rna\nlib_struct: \nsequence_protocol: \nsequence_kit: \nlibrary_protocol: \nlibrary_kit:\n```\n\n**seqspec_version** — version of the seqspec format used (this tutorial will use version 0.3.0)\n\n**assay_id, name, doi, date, description** — metadata describing the assay\n\n**library_protocol, library_kit** — kit and reagents used for library prep\n\n**sequence_protocol, sequence_kit** — sequencing instrument and reagents used\n\n### Example\n\nSuppose you used the **Parse Biosciences Evercode WT Mega v2.0.1 dual index kit** to generate an scRNA-seq library, sequenced on **Illumina NovaSeq X**. The corresponding seqspec file might look like so:\n\n```yaml\n!Assay\nseqspec_version: 0.3.0\nassay_id: Evercode-WT-mega-v2-dual-index\nname: Parse Evercode Mega WT v2 using dual Illumina multiplex index\ndoi: https://www.protocols.io/view/evercode-wt-mega-v2-2-1-8epv5xxrng1b/v1?step=21\ndate: 08 November 2023\ndescription: split-pool ligation-based transcriptome sequencing\nmodalities: rna\nlib_struct: https://igvf.github.io/seqspec/\nlibrary_protocol: single-nucleus RNA sequencing assay (OBI:0003109)\nlibrary_kit: Evercode WT Mega v2.0.1 dual index\nsequence_protocol: Illumina NovaSeq X (EFO:0022840)\nsequence_kit: NovaSeq X Series 25B Reagent Kit\n```\n\n## Section 2: Library Structure\n\nThe library structure section lists all regions in the sequencing library (from 5’ to 3’), such as primers, linkers, UMIs, and barcodes.\n\nEach region is defined with the following template:\n\n``` yaml\n- !Region\n  parent_id: \n  region_id: \n  region_type:\n  name: \n  sequence_type: \n  sequence: \n  min_len: \n  max_len: \n  onlist: \n  regions: \n```\n\n**region_id, region_type, name** — identifies and describes the region\n\n**parent_id** — refers to the parent region (if it exists)\n\n**sequence, sequence_type** — specifies the nucleotide sequence and its type (e.g., fixed, onlist, variable)\n\n**min_len, max_len** — defines expected sequence lengths\n\n**onlist** — references a file or list of valid sequences (e.g., known cell barcodes)\n\n### Nested Regions\n\nParent regions can contain multiple child regions, forming a hierarchical structure.\nHere’s a minimal example with one parent and two child regions:\n\n``` yaml\nlibrary_spec:\n- !Region\n  parent_id: null\n  region_id: parent\n  ...\n  regions:\n  - !Region\n    parent_id: parent\n    region_id: region_1\n    ...\n    regions: null\n  - !Region\n    parent_id: parent\n    region_id: region_2\n    ...\n    regions: null\n```\n\n### Examples\n\nBelow are two example regions you might find in a seqspec file.\n\n#### Example 1: Illumina P5 primer\n``` yaml\n- !Region\n  parent_id: null\n  region_id: P5\n  region_type: primer\n  name: P5\n  sequence_type: fixed\n  sequence: AATGATACGGCGACCACCGAGATCTACAC\n  min_len: 29\n  max_len: 29\n  onlist: null\n  regions: null\n```\n\n#### Example 2: Parse Biosciences Evercode WT cell barcode\n``` yaml\n- !Region\n  parent_id: null\n  region_id: BC\n  region_type: barcode\n  name: cell barcode\n  sequence_type: onlist\n  sequence: NNNNNNNNNNNNNNNN\n  min_len: 16\n  max_len: 16\n  onlist: !Onlist\n    location: local\n    filename: onlist.txt\n  regions: null\n```\n\n::: {.callout-note title=\"What is an Onlist?\"}\nIn Parse Evercode libraries, barcode regions are validated against a fixed list of known barcodes called the “onlist”.\n:::\n\n## Section 3: Read Structure\n\nThe read structure section links your FASTQ files to specific sequencing reads.\n\nEach read entry looks like this:\n\n``` yaml\n- !Read\n  read_id: \n  name: \n  modality: \n  primer_id: \n  min_len: \n  max_len: \n  strand: \n  files:\n```\n\n**read_id, name** — identifies the read object\n\n**primer_id** — links to the corresponding primer region\n\n**strand** — direction of sequencing relative to the library layout\n\n**min_len, max_len** — expected read length\n\n**files** — references the FASTQ files containing this read\n\n### Example\n\n``` yaml\nsequence_spec:\n- !Read\n  read_id: read_1\n  name: Read 1\n  modality: rna\n  primer_id: truseq_read1\n  min_len: 28\n  max_len: 28\n  strand: pos\n  files:\n  - !File\n    file_id: read_1\n    filename: read_1.fastq.gz\n    filetype: fastq.gz\n    filesize: 10 GB\n    url: https://example.org/read_1.fastq.gz\n    urltype: https\n    md5: d1410f93b53357d4f95edb0ba0d73c07\n```\n\n### Step 3: Validate Your seqspec file with `seqspec check`\nYou can use `seqspec check` command from the seqspec package to verify your seqspec file is correctly formatted.\n\nInstall seqspec using **pip**.\n\n```bash\npip install seqspec\n```\n\nOr, if you're using a conda environment, install it with:\n\n```bash\nconda install -c conda-forge -c bioconda seqspec\n``` \n\nOnce installed, you can validate your file - let’s call it seqspec.yaml - by running:\n\n```bash\nseqspec check seqspec.yaml\n```\n\nIf your file is valid, the command will complete without errors; otherwise, it will print a description of any issues found in the specification.\n\n# Summary\n\n| Section           | Purpose                                          |\n|-------------------|:------------------------------------------------:|\n| Assay Info        | Defines the experimental and sequencing metadata | \n| Library Structure | Describes regions within your sequencing library |\n| Read Structure    | Links reads and files to specific regions        | \n<br>\n\n:::{.highlight-section}\nTo get a get an assay-specific sample seq-spec file and tutorial, select your assay [here](seqspec_tutorials.qmd).\n:::"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"highlight-style":"ayu-dark","output-file":"seqspec.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.25","theme":{"light":"flatly"},"mainfont":"Inter","fontsize":"1rem","linestretch":1.6,"toc-location":"left","title":"What is `seqspec`?"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}