{"title":"Pseudoalignment of scRNA-seq Reads with `kb-python`","markdown":{"yaml":{"title":"Pseudoalignment of scRNA-seq Reads with `kb-python`"},"headingText":"Workflows","containsRefs":false,"markdown":"\n::: {.callout-note}\nThis tutorial provides a brief introduction to kb-python.\nFor a more in-depth guide, see the [official documentation](https://kallisto.readthedocs.io/en/latest/index.html).\n:::\n\n**kb-python** is a lightweight, command-line toolkit for processing single-cell RNA sequencing (scRNA-seq) data. It provides an efficient and transparent way to convert raw sequencing reads into gene count matrices ready for downstream analysis.\n\nThe tool integrates two powerful components:\n\n* **kallisto** - performs fast and accurate transcript quantification using pseudoalignment\n\n* **bustools** - manages barcode and UMI information in the BUS (Barcode, UMI, Set) file format.\n\nTogether, these tools enable a streamlined and modular workflow that supports flexible experimental designs and efficient large-scale processing.\n\nA typical kb-python workflow includes:\n\n* Building a reference index with `kb ref`\n\n* Processing **FASTQ** files into the **BUS format** with `kb count`\n\n* Generating a count matrix summarizing gene expression per cell\n\n\nkb-python provides three workflows tailored to different experimental setups and analysis goals. The two most commonly used are:\n\n* **NAC workflow** – quantifies nascent (unspliced) transcripts. This workflow is typically used for **single-nucleus RNA-seq** experiments, where a substantial portion of captured mRNA remains unspliced.\n\n* **Standard workflow** – quantifies mature (fully spliced) transcripts. This workflow is suitable when you are interested only in processed mRNA.\n\n## Step 1: Generate a Reference Index\nThe first step of any RNA-seq analysis is aligning your reads to a reference genome. To do this, kb-python requires a reference index representing the set of target transcripts to which your reads will be mapped.\n\nkb-python conveniently has a precompiled set of indices for the following species:\n\n* human\n* mouse\n* dog \n* monkey\n* zebrafish\n\n::: {.callout-note title=\"What if kb-python doesn't have the index I need?\"}\nIf you require a custom index, please refer to [Generate a reference index](https://kallisto.readthedocs.io/en/latest/index/index_generation.html) in the documentation.\n:::\n\nFor the **standard workflow**, you can load the human index as follows:\n\n```bash\nkb ref -d human -i index.idx -g t2g.txt\n```\n\nwhich will create the files index.idx and t2g.txt.\n\nand for the **nascent workflow**,\n\n```bash\nkb ref --workflow=nac -d human -i index.idx \\ \n    -g t2g.txt -c1 cdna.txt -c2 nascent.txt\n```\n\nwhich will additionally generate the files cdna.txt and nascent.txt.\n\n::: {.callout-note}\nSee how the precompiled indices were generated [here](https://github.com/pachterlab/kallisto-transcriptome-indices)\n:::\n\n## Step 2: Align to Reference Genome\nThe next step is to generate a count matrix by pseudoaligning the reads to your reference index using the `kb count` command. For example, suppose you have two paired-end FASTQ files (read1.fastq and read2.fastq) from a 10x Chromium NextGen v3 library.\n\nFor the **standard workflow**, you can perform pseudoalignment with:\n\n```bash\nkb count -i index_file.idx -g t2g_file.txt -x 10XV3 \\\n    -o output_dir read1.fastq read2.fastq\n```\n\nand for the **nascent workflow**,\n\n```bash\nkb count --workflow=nac -i index_file.idx -g t2g_file.txt -c1 cdna.txt \\\n    -c2 nascent.txt -x 10XV3 -o output_dir read1.fastq read2.fastq\n```\n\nwhere `output_dir` is the folder where you wish the results of `kb_count` to be stored.\n\n::: {.callout-note title=\"What is a FASTQ file?\"}\nFASTQ files are the standard format for storing raw sequencing reads from next-generation sequencing instruments. Each read in a FASTQ file is represented by four lines:\n\n```ruby\n@SEQ_ID\nGATTTGGGGTTCAAAGCAGTATCGATCAAATAGTAAATCCATTTGTTCAACTCACAGTTT\n+\n!''*((((***+))%%%++)(%%%%).1***-+*''))**55CCF>>>>>>CCCCCCC65\n```\n\n* **Line 1** – Read identifier (begins with @)\n\n* **Line 2** – Nucleotide sequence\n\n* **Line 3** – Separator line (usually just +)\n\n* **Line 4** – Quality scores for each base (encoded as ASCII characters)\n\n`kb count` accepts both raw and gzipped FASTQ files. If your reads are stored in another file format, you will have to convert to FASTQ before pseudoalignment with kb-python.\n:::\n\nChange `-x 10XV3` according to the specific technology you used to generate your library.\n\n* 10X Chromium GEM-X V4: `-x 10XV4`\n* Parse Evercode WT v2: `-x SPLITSEQ`\n\nTo see a complete list of technologies and their corresponding technology strings, type `kb --list` into your terminal.\n\n### Parse Evercode WT v3: Using a Custom Specification\n\nCurrently, **kb-python** does not include a built-in specification for the **Parse Evercode WT v3** chemistry. To align Parse v3 data, you must manually specify the assay configuration by providing:\n\n* <a href=\"v3_onlist.txt\" download>v3_onlist.txt</a> — a list of valid cell barcodes\n\n* a technology string defining barcode positions within the read: `-x \"1,10,18,1,30,38,1,50,58:1,0,10:0,0,0\"`\n\n* the orientation of the first read (R1) with relative to your library specification: `--strand=forward`\n\n* the read parity (whether the assay produces single- or paired-end reads): `--paired=paired`\n\nThen, run:\n```bash\nkb count --h5ad --strand=forward --parity=paired \\\n  -w v3_onlist.txt -x \"1,10,18,1,30,38,1,50,58:1,0,10:0,0,0 \\\n  -g t2g.txt -i index.idx R1.fastq.gz R2.fastq.gz\n```\n\n### Parse Evercode WT: Substituting Barcodes with the `-r` Argument\nThe Parse Evercode WT chemistry is unique in that each cell has two cell-specific barcodes rather than one. Since kb-python expects a single barcode per cell, you must collapse barcode pairs before pseudoalignment.\nThis is done using the -r argument in kb count, for example:\n\n```bash\nkb count -r <replace_file> ...\n```\n\nwhere \\<replace_file\\> is a **TSV** file with two columns:\n\n* Column 1: barcodes to be replaced\n\n* Column 2: corresponding replacement barcodes\n\nYou can download:\n\n* v2_replace.txt for v2 chemistry <a href=\"v2_replace.txt\" download>here</a>\n\n* v3_replace.txt for v3 chemistry <a href=\"v3_replace.txt\" download>here</a>\n\n:::{.callout-important}\nWhen using `-r` to specify a replacement list in kb count, two count matrices will be produced: one with the original barcodes (stored in the output file `counts_unfiltered`) and one with the replacement barcodes (stored in the output file `counts_unfiltered_modified`).\n:::\n\n## Next Steps\nAfter generating your count matrix, you can import it into analysis tools such as **Scanpy**, **Seurat**, or **Bioconductor** for downstream processing, clustering, and visualization.","srcMarkdownNoYaml":"\n::: {.callout-note}\nThis tutorial provides a brief introduction to kb-python.\nFor a more in-depth guide, see the [official documentation](https://kallisto.readthedocs.io/en/latest/index.html).\n:::\n\n**kb-python** is a lightweight, command-line toolkit for processing single-cell RNA sequencing (scRNA-seq) data. It provides an efficient and transparent way to convert raw sequencing reads into gene count matrices ready for downstream analysis.\n\nThe tool integrates two powerful components:\n\n* **kallisto** - performs fast and accurate transcript quantification using pseudoalignment\n\n* **bustools** - manages barcode and UMI information in the BUS (Barcode, UMI, Set) file format.\n\nTogether, these tools enable a streamlined and modular workflow that supports flexible experimental designs and efficient large-scale processing.\n\nA typical kb-python workflow includes:\n\n* Building a reference index with `kb ref`\n\n* Processing **FASTQ** files into the **BUS format** with `kb count`\n\n* Generating a count matrix summarizing gene expression per cell\n\n## Workflows\n\nkb-python provides three workflows tailored to different experimental setups and analysis goals. The two most commonly used are:\n\n* **NAC workflow** – quantifies nascent (unspliced) transcripts. This workflow is typically used for **single-nucleus RNA-seq** experiments, where a substantial portion of captured mRNA remains unspliced.\n\n* **Standard workflow** – quantifies mature (fully spliced) transcripts. This workflow is suitable when you are interested only in processed mRNA.\n\n## Step 1: Generate a Reference Index\nThe first step of any RNA-seq analysis is aligning your reads to a reference genome. To do this, kb-python requires a reference index representing the set of target transcripts to which your reads will be mapped.\n\nkb-python conveniently has a precompiled set of indices for the following species:\n\n* human\n* mouse\n* dog \n* monkey\n* zebrafish\n\n::: {.callout-note title=\"What if kb-python doesn't have the index I need?\"}\nIf you require a custom index, please refer to [Generate a reference index](https://kallisto.readthedocs.io/en/latest/index/index_generation.html) in the documentation.\n:::\n\nFor the **standard workflow**, you can load the human index as follows:\n\n```bash\nkb ref -d human -i index.idx -g t2g.txt\n```\n\nwhich will create the files index.idx and t2g.txt.\n\nand for the **nascent workflow**,\n\n```bash\nkb ref --workflow=nac -d human -i index.idx \\ \n    -g t2g.txt -c1 cdna.txt -c2 nascent.txt\n```\n\nwhich will additionally generate the files cdna.txt and nascent.txt.\n\n::: {.callout-note}\nSee how the precompiled indices were generated [here](https://github.com/pachterlab/kallisto-transcriptome-indices)\n:::\n\n## Step 2: Align to Reference Genome\nThe next step is to generate a count matrix by pseudoaligning the reads to your reference index using the `kb count` command. For example, suppose you have two paired-end FASTQ files (read1.fastq and read2.fastq) from a 10x Chromium NextGen v3 library.\n\nFor the **standard workflow**, you can perform pseudoalignment with:\n\n```bash\nkb count -i index_file.idx -g t2g_file.txt -x 10XV3 \\\n    -o output_dir read1.fastq read2.fastq\n```\n\nand for the **nascent workflow**,\n\n```bash\nkb count --workflow=nac -i index_file.idx -g t2g_file.txt -c1 cdna.txt \\\n    -c2 nascent.txt -x 10XV3 -o output_dir read1.fastq read2.fastq\n```\n\nwhere `output_dir` is the folder where you wish the results of `kb_count` to be stored.\n\n::: {.callout-note title=\"What is a FASTQ file?\"}\nFASTQ files are the standard format for storing raw sequencing reads from next-generation sequencing instruments. Each read in a FASTQ file is represented by four lines:\n\n```ruby\n@SEQ_ID\nGATTTGGGGTTCAAAGCAGTATCGATCAAATAGTAAATCCATTTGTTCAACTCACAGTTT\n+\n!''*((((***+))%%%++)(%%%%).1***-+*''))**55CCF>>>>>>CCCCCCC65\n```\n\n* **Line 1** – Read identifier (begins with @)\n\n* **Line 2** – Nucleotide sequence\n\n* **Line 3** – Separator line (usually just +)\n\n* **Line 4** – Quality scores for each base (encoded as ASCII characters)\n\n`kb count` accepts both raw and gzipped FASTQ files. If your reads are stored in another file format, you will have to convert to FASTQ before pseudoalignment with kb-python.\n:::\n\nChange `-x 10XV3` according to the specific technology you used to generate your library.\n\n* 10X Chromium GEM-X V4: `-x 10XV4`\n* Parse Evercode WT v2: `-x SPLITSEQ`\n\nTo see a complete list of technologies and their corresponding technology strings, type `kb --list` into your terminal.\n\n### Parse Evercode WT v3: Using a Custom Specification\n\nCurrently, **kb-python** does not include a built-in specification for the **Parse Evercode WT v3** chemistry. To align Parse v3 data, you must manually specify the assay configuration by providing:\n\n* <a href=\"v3_onlist.txt\" download>v3_onlist.txt</a> — a list of valid cell barcodes\n\n* a technology string defining barcode positions within the read: `-x \"1,10,18,1,30,38,1,50,58:1,0,10:0,0,0\"`\n\n* the orientation of the first read (R1) with relative to your library specification: `--strand=forward`\n\n* the read parity (whether the assay produces single- or paired-end reads): `--paired=paired`\n\nThen, run:\n```bash\nkb count --h5ad --strand=forward --parity=paired \\\n  -w v3_onlist.txt -x \"1,10,18,1,30,38,1,50,58:1,0,10:0,0,0 \\\n  -g t2g.txt -i index.idx R1.fastq.gz R2.fastq.gz\n```\n\n### Parse Evercode WT: Substituting Barcodes with the `-r` Argument\nThe Parse Evercode WT chemistry is unique in that each cell has two cell-specific barcodes rather than one. Since kb-python expects a single barcode per cell, you must collapse barcode pairs before pseudoalignment.\nThis is done using the -r argument in kb count, for example:\n\n```bash\nkb count -r <replace_file> ...\n```\n\nwhere \\<replace_file\\> is a **TSV** file with two columns:\n\n* Column 1: barcodes to be replaced\n\n* Column 2: corresponding replacement barcodes\n\nYou can download:\n\n* v2_replace.txt for v2 chemistry <a href=\"v2_replace.txt\" download>here</a>\n\n* v3_replace.txt for v3 chemistry <a href=\"v3_replace.txt\" download>here</a>\n\n:::{.callout-important}\nWhen using `-r` to specify a replacement list in kb count, two count matrices will be produced: one with the original barcodes (stored in the output file `counts_unfiltered`) and one with the replacement barcodes (stored in the output file `counts_unfiltered_modified`).\n:::\n\n## Next Steps\nAfter generating your count matrix, you can import it into analysis tools such as **Scanpy**, **Seurat**, or **Bioconductor** for downstream processing, clustering, and visualization."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"highlight-style":"ayu-dark","output-file":"kb_python.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.25","theme":{"light":"flatly"},"mainfont":"Inter","fontsize":"1rem","linestretch":1.6,"toc-location":"left","title":"Pseudoalignment of scRNA-seq Reads with `kb-python`"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}