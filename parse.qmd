---
title: Analyzing Your Parse Biosciences Evercode WT scRNA-seq Assay Data
---

## Step 0: Get started with SEQSPEC
To ensure that all data generated at Caltech are standardized and reproducible, we require that every dataset include a **seqspec file**. A seqspec file provides a machine-readable description of your experiment, specifying the assay information, library structure, and read structure in a YAML-formatted file.

### SEQSPEC Tutorials
```{=html}
<div class="tech-selector">
  <!-- Parse Row -->
  <div class="tech-row">
    <button class="tech-btn tech-parse" data-link="seqspec/webpages/Parse/parse_v2_single.html">
      <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"/><path d="M9 9h6v6H9z"/></svg>
      <h3>Parse Evercode WT v2 (Single Index)</h3>
    </button>
    <button class="tech-btn tech-parse" data-link="seqspec/webpages/Parse/parse_v2_dual.html">
      <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"/><path d="M7 7h10v10H7z"/></svg>
      <h3>Parse Evercode WT v2 (Dual Index)</h3>
    </button>
    <button class="tech-btn tech-parse" data-link="seqspec/webpages/parse/parse_v3.html">
      <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"/><circle cx="12" cy="12" r="4"/></svg>
      <h3>Parse Evercode WT v3</h3>
    </button>
  </div>

</div>

<style>
.tech-selector {
  display: flex;
  flex-direction: column;
  gap: 2em;
  margin: 2em auto;
  max-width: 900px;
}

.tech-row {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  gap: 1.5em;
}

.tech-btn {
  background: #f8f9fa;
  border: 3px solid #005a91;
  border-radius: 12px;
  padding: 1.5em;
  width: 200px;
  text-align: center;
  cursor: pointer;
  transition: all 0.25s ease;
  box-shadow: 0 3px 8px rgba(0,0,0,0.1);
  color: #222;
}

.tech-btn svg {
  margin-bottom: 0.5em;
}

.tech-btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 5px 12px rgba(0,0,0,0.2);
}

/* Parse brand color */
.tech-parse {
  border-color: #0072b2;
}
.tech-parse:hover {
  background: #0072b2;
  color: white;
}

.tech-btn h3 {
  margin: 0.3em 0;
  font-size: 0.92em;
}

.tech-btn p {
  font-size: 0.9em;
  opacity: 0.8;
}

h1.title {
  text-align: center;
  margin-bottom: 1em;
}
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  document.querySelectorAll(".tech-btn").forEach(btn => {
    btn.addEventListener("click", () => {
      const target = btn.dataset.link;
      if (target) window.location.href = target;
    });
  });
});
</script>
```
## Step 1: Align Your Library Reads with [kb-python](kb_python.qmd)

Aligning reads from a **Parse Evercode WT** library requires additional consideration compared to other scRNA-seq assays. Unlike most platforms, which use primers targeting a specific region of each mRNA molecule, Parse Evercode WT employs two types of primers — **poly(T) primers** that bind to the 3′ poly(A) tail and **random oligo primers** that bind to random internal regions of the transcript. Each primer type has its own corresponding set of cell-specific barcodes. As a result, each cell is represented by two barcodes rather than one, as in assays such as 10x Genomics.

To generate a unified count matrix from the raw reads, the counts associated with these two barcodes must be collapsed so that each cell is represented once. In kb-python, this is accomplished by replacing all random oligo barcodes with their corresponding poly(T) barcodes using the `-r` argument.

## An Example (v2)
Here we provide a brief example of how to align a Parse Evercode WT v2 library to a reference using `kb count`. For a more in-depth tutorial,  see our page on [**kb-python**](kb_python.qmd).

To psuedoalign your Parse data, run:

```bash
kb count --h5ad -x SPLIT-SEQ -r v2_replace.txt \
  -g t2g.txt -i index.idx R1.fastq.gz R2.fastq.gz
```

where index.idx and t2g.txt are files generated by `kb-ref`, and R1.fastq.gz and R2.fastq.gz are your raw paired-end reads. 
The replace.txt file specifies the barcode substitution. 
The `--h5ad` argument generates an `h5ad` formatted file for downstream processing with **Scanpy**.

If you performed a **single-nucleus RNA-seq** experiment, instead use the **NAC workflow** to align both nascent and mature reads:

```bash
kb count --h5ad -r v2_replace.txt --workflow=nac -x 10XV3 -g t2g.txt -i index.idx \
  -c1 cdna.txt -c2 nascent.txt R1.fastq.gz R2.fastq.gz
```

Here, cdna.txt and nascent.text are files generated by `kb ref -workflow=nac`.

You can download the file **v2_replace.txt** for the v2 chemistry <a href="v2_replace.txt" download>here</a>.

## An Example (v3)
Currently, kb-python does not include a built-in specification for Parse Evercode WT v3.
Instead, we must provide the assay information manually by specifying:

* <a href="v3_onlist.txt" download>v3_onlist.txt</a> — a list of valid cell barcodes

* a technology string defining barcode positions within the read: `-x "1,10,18,1,30,38,1,50,58:1,0,10:0,0,0"`

* <a href="splitseqv3_replace.txt" download>v3_replace.txt</a> - mapping between poly(T) and random oligo barcodes

* the orientation of the first read (R1) with relative to your library specification: `--strand=forward`

* the read parity (whether the assay produces single- or paired-end reads): `--paired=paired`

Then, run:
```bash
kb count --h5ad --strand=forward --parity=paired \
  -r v3_replace.txt -w v3_onlist.txt \
  -x "1,10,18,1,30,38,1,50,58:1,0,10:0,0,0 \
  -g t2g.txt -i index.idx R1.fastq.gz R2.fastq.gz
```

## Step 2: Process and Analyze Your Data
Now you are ready to process your data! To continue with downstream analysis follow our [**example scRNA-seq pipeline**](sample_pipeline.ipynb).

